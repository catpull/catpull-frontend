/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IHegicPoolInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateTotalPremium(uint256,uint256,uint256)": FunctionFragment;
    "exercise(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lockedAmount()": FunctionFragment;
    "options(uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "provideFrom(address,uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sellOption(address,uint256,uint256,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setLockupPeriod(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "tranches(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unhedgedBalance()": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateTotalPremium",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exercise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "options",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "provideFrom",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellOption",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tranches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unhedgedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "options", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tranches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unhedgedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Acquired(uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Exercised(uint256,uint256)": EventFragment;
    "Expired(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Acquired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exercised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Expired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class IHegicPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IHegicPoolInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    exercise(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operator: string;
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operator: string;
      0: string;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lockedAmount(overrides?: CallOverrides): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    options(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    "options(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLockupPeriod(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLockupPeriod(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalBalance(overrides?: CallOverrides): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "totalBalance()"(overrides?: CallOverrides): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    tranches(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "tranches(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unhedgedBalance(overrides?: CallOverrides): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "unhedgedBalance()"(overrides?: CallOverrides): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    unlock(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalPremium(
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "calculateTotalPremium(uint256,uint256,uint256)"(
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  exercise(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exercise(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  options(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    strike: BigNumber;
    amount: BigNumber;
    lockedAmount: BigNumber;
    expired: BigNumber;
    premium: BigNumber;
    profit: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  "options(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    strike: BigNumber;
    amount: BigNumber;
    lockedAmount: BigNumber;
    expired: BigNumber;
    premium: BigNumber;
    profit: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  provideFrom(
    account: string,
    amount: BigNumberish,
    minShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "provideFrom(address,uint256,uint256)"(
    account: string,
    amount: BigNumberish,
    minShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellOption(
    holder: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellOption(address,uint256,uint256,uint256)"(
    holder: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLockupPeriod(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLockupPeriod(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  tranches(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    share: BigNumber;
    amount: BigNumber;
    creationTimestamp: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "tranches(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    share: BigNumber;
    amount: BigNumber;
    creationTimestamp: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unhedgedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "unhedgedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlock(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "unlock(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    exercise(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    options(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    "options(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockupPeriod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockupPeriod(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    tranches(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "tranches(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unhedgedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "unhedgedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Acquired(
      id: BigNumberish | null,
      settlementFee: null,
      premium: null
    ): EventFilter;

    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Exercised(id: BigNumberish | null, profit: null): EventFilter;

    Expired(id: BigNumberish | null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Withdrawn(
      account: string | null,
      trancheID: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exercise(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    options(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "options(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLockupPeriod(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLockupPeriod(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    tranches(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tranches(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unhedgedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "unhedgedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exercise(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    options(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "options(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLockupPeriod(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLockupPeriod(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tranches(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tranches(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unhedgedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unhedgedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
