/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HegicCallInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "INITIAL_RATE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetPriceToken()": FunctionFragment;
    "atmPricer()": FunctionFragment;
    "availableBalance()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateTotalPremium(uint256,uint256,uint256)": FunctionFragment;
    "collateralizationRatio()": FunctionFragment;
    "exercise(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "inputValidation()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isCall()": FunctionFragment;
    "itmPricer()": FunctionFragment;
    "lockedAmount()": FunctionFragment;
    "lockupPeriodForUnhedgedTranches()": FunctionFragment;
    "maxDepositAmount()": FunctionFragment;
    "maxUtilizationRate()": FunctionFragment;
    "name()": FunctionFragment;
    "options(uint256)": FunctionFragment;
    "optionsManager()": FunctionFragment;
    "otmPricer()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "priceOf(uint256)": FunctionFragment;
    "priceProvider()": FunctionFragment;
    "profitOf(uint256)": FunctionFragment;
    "provideFrom(address,uint256,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardsManager()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sellOption(address,uint256,uint256,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCollateralizationRatio(uint256)": FunctionFragment;
    "setInputValidator(address)": FunctionFragment;
    "setLockupPeriod(uint256)": FunctionFragment;
    "setMaxDepositAmount(uint256)": FunctionFragment;
    "setMaxUtilizationRate(uint256)": FunctionFragment;
    "setPriceCalculator(address,address,address)": FunctionFragment;
    "setRewardsManager(address)": FunctionFragment;
    "setSettlementFeeRecipient(address)": FunctionFragment;
    "settlementFeeRecipient()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tranches(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unhedgedBalance()": FunctionFragment;
    "unhedgedShare()": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPriceToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "atmPricer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateTotalPremium",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exercise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inputValidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isCall", values?: undefined): string;
  encodeFunctionData(functionFragment: "itmPricer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockupPeriodForUnhedgedTranches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxUtilizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "options",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optionsManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "otmPricer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "provideFrom",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellOption",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralizationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInputValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxUtilizationRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceCalculator",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tranches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unhedgedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unhedgedShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetPriceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "atmPricer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inputValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itmPricer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockupPeriodForUnhedgedTranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "options", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "otmPricer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profitOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInputValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tranches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unhedgedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unhedgedShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Acquired(uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Exercised(uint256,uint256)": EventFragment;
    "Expired(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Acquired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exercised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Expired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class HegicCall extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HegicCallInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    INITIAL_RATE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "INITIAL_RATE()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    assetPriceToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "assetPriceToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    atmPricer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "atmPricer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    availableBalance(overrides?: CallOverrides): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "availableBalance()"(overrides?: CallOverrides): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    collateralizationRatio(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "collateralizationRatio()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    exercise(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    inputValidation(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "inputValidation()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isCall(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isCall()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    itmPricer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "itmPricer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lockedAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lockupPeriodForUnhedgedTranches(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockupPeriodForUnhedgedTranches()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxDepositAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxDepositAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxUtilizationRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxUtilizationRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    optionsManager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "optionsManager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    otmPricer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "otmPricer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    priceOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "priceOf(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    priceProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "priceProvider()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    profitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "profitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewardsManager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCollateralizationRatio(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralizationRatio(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInputValidator(
      validation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInputValidator(address)"(
      validation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLockupPeriod(
      unhedgedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLockupPeriod(uint256)"(
      unhedgedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxDepositAmount(
      total: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxDepositAmount(uint256)"(
      total: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxUtilizationRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxUtilizationRate(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriceCalculator(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceCalculator(address,address,address)"(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardsManager(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardsManager(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSettlementFeeRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSettlementFeeRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlementFeeRecipient(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "settlementFeeRecipient()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalBalance(overrides?: CallOverrides): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "totalBalance()"(overrides?: CallOverrides): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tranches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "tranches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unhedgedBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "unhedgedBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    unhedgedShare(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "unhedgedShare()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    unlock(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  INITIAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "INITIAL_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  assetPriceToken(overrides?: CallOverrides): Promise<string>;

  "assetPriceToken()"(overrides?: CallOverrides): Promise<string>;

  atmPricer(overrides?: CallOverrides): Promise<string>;

  "atmPricer()"(overrides?: CallOverrides): Promise<string>;

  availableBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "availableBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalPremium(
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "calculateTotalPremium(uint256,uint256,uint256)"(
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  collateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralizationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  exercise(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exercise(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inputValidation(overrides?: CallOverrides): Promise<string>;

  "inputValidation()"(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCall(overrides?: CallOverrides): Promise<boolean>;

  "isCall()"(overrides?: CallOverrides): Promise<boolean>;

  itmPricer(overrides?: CallOverrides): Promise<string>;

  "itmPricer()"(overrides?: CallOverrides): Promise<string>;

  lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockupPeriodForUnhedgedTranches(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockupPeriodForUnhedgedTranches()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "maxDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  "maxUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  options(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    strike: BigNumber;
    amount: BigNumber;
    lockedAmount: BigNumber;
    expired: BigNumber;
    premium: BigNumber;
    profit: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  "options(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    strike: BigNumber;
    amount: BigNumber;
    lockedAmount: BigNumber;
    expired: BigNumber;
    premium: BigNumber;
    profit: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  optionsManager(overrides?: CallOverrides): Promise<string>;

  "optionsManager()"(overrides?: CallOverrides): Promise<string>;

  otmPricer(overrides?: CallOverrides): Promise<string>;

  "otmPricer()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  priceOf(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "priceOf(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceProvider(overrides?: CallOverrides): Promise<string>;

  "priceProvider()"(overrides?: CallOverrides): Promise<string>;

  profitOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "profitOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  provideFrom(
    account: string,
    amount: BigNumberish,
    minShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "provideFrom(address,uint256,uint256)"(
    account: string,
    amount: BigNumberish,
    minShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardsManager(overrides?: CallOverrides): Promise<string>;

  "rewardsManager()"(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellOption(
    holder: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellOption(address,uint256,uint256,uint256)"(
    holder: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCollateralizationRatio(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralizationRatio(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInputValidator(
    validation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInputValidator(address)"(
    validation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLockupPeriod(
    unhedgedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLockupPeriod(uint256)"(
    unhedgedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxDepositAmount(
    total: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxDepositAmount(uint256)"(
    total: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxUtilizationRate(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxUtilizationRate(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriceCalculator(
    _otmPricer: string,
    _atmPricer: string,
    _itmPricer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceCalculator(address,address,address)"(
    _otmPricer: string,
    _atmPricer: string,
    _itmPricer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardsManager(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardsManager(address)"(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSettlementFeeRecipient(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSettlementFeeRecipient(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlementFeeRecipient(overrides?: CallOverrides): Promise<string>;

  "settlementFeeRecipient()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  tranches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    share: BigNumber;
    amount: BigNumber;
    creationTimestamp: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "tranches(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    share: BigNumber;
    amount: BigNumber;
    creationTimestamp: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unhedgedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "unhedgedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  unhedgedShare(overrides?: CallOverrides): Promise<BigNumber>;

  "unhedgedShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlock(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "unlock(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    INITIAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetPriceToken(overrides?: CallOverrides): Promise<string>;

    "assetPriceToken()"(overrides?: CallOverrides): Promise<string>;

    atmPricer(overrides?: CallOverrides): Promise<string>;

    "atmPricer()"(overrides?: CallOverrides): Promise<string>;

    availableBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "availableBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    collateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    exercise(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inputValidation(overrides?: CallOverrides): Promise<string>;

    "inputValidation()"(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCall(overrides?: CallOverrides): Promise<boolean>;

    "isCall()"(overrides?: CallOverrides): Promise<boolean>;

    itmPricer(overrides?: CallOverrides): Promise<string>;

    "itmPricer()"(overrides?: CallOverrides): Promise<string>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockupPeriodForUnhedgedTranches(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockupPeriodForUnhedgedTranches()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "maxUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strike: BigNumber;
      amount: BigNumber;
      lockedAmount: BigNumber;
      expired: BigNumber;
      premium: BigNumber;
      profit: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    optionsManager(overrides?: CallOverrides): Promise<string>;

    "optionsManager()"(overrides?: CallOverrides): Promise<string>;

    otmPricer(overrides?: CallOverrides): Promise<string>;

    "otmPricer()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    priceOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceOf(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceProvider(overrides?: CallOverrides): Promise<string>;

    "priceProvider()"(overrides?: CallOverrides): Promise<string>;

    profitOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "profitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsManager(overrides?: CallOverrides): Promise<string>;

    "rewardsManager()"(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralizationRatio(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralizationRatio(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInputValidator(
      validation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInputValidator(address)"(
      validation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockupPeriod(
      unhedgedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockupPeriod(uint256)"(
      unhedgedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDepositAmount(
      total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxDepositAmount(uint256)"(
      total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxUtilizationRate(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxUtilizationRate(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceCalculator(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceCalculator(address,address,address)"(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsManager(value: string, overrides?: CallOverrides): Promise<void>;

    "setRewardsManager(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlementFeeRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSettlementFeeRecipient(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementFeeRecipient(overrides?: CallOverrides): Promise<string>;

    "settlementFeeRecipient()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tranches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "tranches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unhedgedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "unhedgedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    unhedgedShare(overrides?: CallOverrides): Promise<BigNumber>;

    "unhedgedShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Acquired(
      id: BigNumberish | null,
      settlementFee: null,
      premium: null
    ): EventFilter;

    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Exercised(id: BigNumberish | null, profit: null): EventFilter;

    Expired(id: BigNumberish | null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Withdrawn(
      account: string | null,
      trancheID: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    assetPriceToken(overrides?: CallOverrides): Promise<BigNumber>;

    "assetPriceToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    atmPricer(overrides?: CallOverrides): Promise<BigNumber>;

    "atmPricer()"(overrides?: CallOverrides): Promise<BigNumber>;

    availableBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "availableBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    exercise(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inputValidation(overrides?: CallOverrides): Promise<BigNumber>;

    "inputValidation()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCall(overrides?: CallOverrides): Promise<BigNumber>;

    "isCall()"(overrides?: CallOverrides): Promise<BigNumber>;

    itmPricer(overrides?: CallOverrides): Promise<BigNumber>;

    "itmPricer()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockupPeriodForUnhedgedTranches(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockupPeriodForUnhedgedTranches()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDepositAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "maxUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    options(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionsManager(overrides?: CallOverrides): Promise<BigNumber>;

    "optionsManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    otmPricer(overrides?: CallOverrides): Promise<BigNumber>;

    "otmPricer()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceOf(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "priceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "profitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardsManager(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCollateralizationRatio(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralizationRatio(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInputValidator(
      validation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInputValidator(address)"(
      validation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLockupPeriod(
      unhedgedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLockupPeriod(uint256)"(
      unhedgedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxDepositAmount(
      total: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxDepositAmount(uint256)"(
      total: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxUtilizationRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxUtilizationRate(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriceCalculator(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceCalculator(address,address,address)"(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardsManager(value: string, overrides?: Overrides): Promise<BigNumber>;

    "setRewardsManager(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSettlementFeeRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSettlementFeeRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlementFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "settlementFeeRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tranches(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tranches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unhedgedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "unhedgedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    unhedgedShare(overrides?: CallOverrides): Promise<BigNumber>;

    "unhedgedShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INITIAL_RATE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    assetPriceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetPriceToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    atmPricer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "atmPricer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "availableBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTotalPremium(uint256,uint256,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exercise(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inputValidation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inputValidation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isCall()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itmPricer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "itmPricer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockupPeriodForUnhedgedTranches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockupPeriodForUnhedgedTranches()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxUtilizationRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionsManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    otmPricer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "otmPricer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceOf(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideFrom(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "provideFrom(address,uint256,uint256)"(
      account: string,
      amount: BigNumberish,
      minShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellOption(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellOption(address,uint256,uint256,uint256)"(
      holder: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCollateralizationRatio(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralizationRatio(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInputValidator(
      validation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInputValidator(address)"(
      validation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLockupPeriod(
      unhedgedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLockupPeriod(uint256)"(
      unhedgedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxDepositAmount(
      total: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxDepositAmount(uint256)"(
      total: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxUtilizationRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxUtilizationRate(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriceCalculator(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceCalculator(address,address,address)"(
      _otmPricer: string,
      _atmPricer: string,
      _itmPricer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardsManager(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardsManager(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSettlementFeeRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSettlementFeeRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlementFeeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settlementFeeRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tranches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tranches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unhedgedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unhedgedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unhedgedShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unhedgedShare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
