/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UiProviderInterface extends ethers.utils.Interface {
  functions: {
    "buyViewData(address,address)": FunctionFragment;
    "optionsViewData(address,uint256)": FunctionFragment;
    "tranchesViewData(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyViewData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "optionsViewData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tranchesViewData",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyViewData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionsViewData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tranchesViewData",
    data: BytesLike
  ): Result;

  events: {};
}

export class UiProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UiProviderInterface;

  functions: {
    buyViewData(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      out: {
        currentPrice: BigNumber;
        availableBalance: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      0: {
        currentPrice: BigNumber;
        availableBalance: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
    }>;

    "buyViewData(address,address)"(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      out: {
        currentPrice: BigNumber;
        availableBalance: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      0: {
        currentPrice: BigNumber;
        availableBalance: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
    }>;

    optionsViewData(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: {
        totalPNL: BigNumber;
        optionPageEntries: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        2: BigNumber;
      };
      0: {
        totalPNL: BigNumber;
        optionPageEntries: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        2: BigNumber;
      };
    }>;

    "optionsViewData(address,uint256)"(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: {
        totalPNL: BigNumber;
        optionPageEntries: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        2: BigNumber;
      };
      0: {
        totalPNL: BigNumber;
        optionPageEntries: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          isCall: boolean;
          state: number;
          optionId: BigNumber;
          asset: string;
          strike: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          premium: BigNumber;
          value: BigNumber;
          0: boolean;
          1: number;
          2: BigNumber;
          3: string;
          4: BigNumber;
          5: BigNumber;
          6: BigNumber;
          7: BigNumber;
          8: BigNumber;
        }[];
        2: BigNumber;
      };
    }>;

    tranchesViewData(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: {
        totalPNL: BigNumber;
        tranchesPageEntries: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        2: BigNumber;
      };
      0: {
        totalPNL: BigNumber;
        tranchesPageEntries: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        2: BigNumber;
      };
    }>;

    "tranchesViewData(address,address,uint256)"(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: {
        totalPNL: BigNumber;
        tranchesPageEntries: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        2: BigNumber;
      };
      0: {
        totalPNL: BigNumber;
        tranchesPageEntries: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        totalEntries: BigNumber;
        0: BigNumber;
        1: {
          state: number;
          share: BigNumber;
          amount: BigNumber;
          creationTimestamp: BigNumber;
          trancheId: BigNumber;
          pnl: BigNumber;
          asset: string;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
          5: BigNumber;
          6: string;
        }[];
        2: BigNumber;
      };
    }>;
  };

  buyViewData(
    pool: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentPrice: BigNumber;
    availableBalance: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "buyViewData(address,address)"(
    pool: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentPrice: BigNumber;
    availableBalance: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  optionsViewData(
    user: string,
    optionsPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalPNL: BigNumber;
    optionPageEntries: {
      isCall: boolean;
      state: number;
      optionId: BigNumber;
      asset: string;
      strike: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      premium: BigNumber;
      value: BigNumber;
      0: boolean;
      1: number;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }[];
    totalEntries: BigNumber;
    0: BigNumber;
    1: {
      isCall: boolean;
      state: number;
      optionId: BigNumber;
      asset: string;
      strike: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      premium: BigNumber;
      value: BigNumber;
      0: boolean;
      1: number;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }[];
    2: BigNumber;
  }>;

  "optionsViewData(address,uint256)"(
    user: string,
    optionsPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalPNL: BigNumber;
    optionPageEntries: {
      isCall: boolean;
      state: number;
      optionId: BigNumber;
      asset: string;
      strike: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      premium: BigNumber;
      value: BigNumber;
      0: boolean;
      1: number;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }[];
    totalEntries: BigNumber;
    0: BigNumber;
    1: {
      isCall: boolean;
      state: number;
      optionId: BigNumber;
      asset: string;
      strike: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      premium: BigNumber;
      value: BigNumber;
      0: boolean;
      1: number;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }[];
    2: BigNumber;
  }>;

  tranchesViewData(
    user: string,
    pool: string,
    optionsPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalPNL: BigNumber;
    tranchesPageEntries: {
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      trancheId: BigNumber;
      pnl: BigNumber;
      asset: string;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
    }[];
    totalEntries: BigNumber;
    0: BigNumber;
    1: {
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      trancheId: BigNumber;
      pnl: BigNumber;
      asset: string;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
    }[];
    2: BigNumber;
  }>;

  "tranchesViewData(address,address,uint256)"(
    user: string,
    pool: string,
    optionsPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalPNL: BigNumber;
    tranchesPageEntries: {
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      trancheId: BigNumber;
      pnl: BigNumber;
      asset: string;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
    }[];
    totalEntries: BigNumber;
    0: BigNumber;
    1: {
      state: number;
      share: BigNumber;
      amount: BigNumber;
      creationTimestamp: BigNumber;
      trancheId: BigNumber;
      pnl: BigNumber;
      asset: string;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
    }[];
    2: BigNumber;
  }>;

  callStatic: {
    buyViewData(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentPrice: BigNumber;
      availableBalance: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "buyViewData(address,address)"(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentPrice: BigNumber;
      availableBalance: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    optionsViewData(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalPNL: BigNumber;
      optionPageEntries: {
        isCall: boolean;
        state: number;
        optionId: BigNumber;
        asset: string;
        strike: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        premium: BigNumber;
        value: BigNumber;
        0: boolean;
        1: number;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      }[];
      totalEntries: BigNumber;
      0: BigNumber;
      1: {
        isCall: boolean;
        state: number;
        optionId: BigNumber;
        asset: string;
        strike: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        premium: BigNumber;
        value: BigNumber;
        0: boolean;
        1: number;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      }[];
      2: BigNumber;
    }>;

    "optionsViewData(address,uint256)"(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalPNL: BigNumber;
      optionPageEntries: {
        isCall: boolean;
        state: number;
        optionId: BigNumber;
        asset: string;
        strike: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        premium: BigNumber;
        value: BigNumber;
        0: boolean;
        1: number;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      }[];
      totalEntries: BigNumber;
      0: BigNumber;
      1: {
        isCall: boolean;
        state: number;
        optionId: BigNumber;
        asset: string;
        strike: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        premium: BigNumber;
        value: BigNumber;
        0: boolean;
        1: number;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      }[];
      2: BigNumber;
    }>;

    tranchesViewData(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalPNL: BigNumber;
      tranchesPageEntries: {
        state: number;
        share: BigNumber;
        amount: BigNumber;
        creationTimestamp: BigNumber;
        trancheId: BigNumber;
        pnl: BigNumber;
        asset: string;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: string;
      }[];
      totalEntries: BigNumber;
      0: BigNumber;
      1: {
        state: number;
        share: BigNumber;
        amount: BigNumber;
        creationTimestamp: BigNumber;
        trancheId: BigNumber;
        pnl: BigNumber;
        asset: string;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: string;
      }[];
      2: BigNumber;
    }>;

    "tranchesViewData(address,address,uint256)"(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalPNL: BigNumber;
      tranchesPageEntries: {
        state: number;
        share: BigNumber;
        amount: BigNumber;
        creationTimestamp: BigNumber;
        trancheId: BigNumber;
        pnl: BigNumber;
        asset: string;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: string;
      }[];
      totalEntries: BigNumber;
      0: BigNumber;
      1: {
        state: number;
        share: BigNumber;
        amount: BigNumber;
        creationTimestamp: BigNumber;
        trancheId: BigNumber;
        pnl: BigNumber;
        asset: string;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: string;
      }[];
      2: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    buyViewData(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyViewData(address,address)"(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionsViewData(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "optionsViewData(address,uint256)"(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tranchesViewData(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tranchesViewData(address,address,uint256)"(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyViewData(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyViewData(address,address)"(
      pool: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionsViewData(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionsViewData(address,uint256)"(
      user: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tranchesViewData(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tranchesViewData(address,address,uint256)"(
      user: string,
      pool: string,
      optionsPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
