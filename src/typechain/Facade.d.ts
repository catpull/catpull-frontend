/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FacadeInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "createOption(address,uint256,uint256,uint256,address[],uint256)": FunctionFragment;
    "exchange()": FunctionFragment;
    "exercise(uint256)": FunctionFragment;
    "getBaseOptionCost(address,uint256,uint256,uint256)": FunctionFragment;
    "getOptionPrice(address,uint256,uint256,uint256,address[])": FunctionFragment;
    "optionsManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolApprove(address)": FunctionFragment;
    "provideEthToPool(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockAll(address,uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createOption",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "exchange", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exercise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseOptionCost",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionPrice",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "optionsManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolApprove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "provideEthToPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAll",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseOptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideEthToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockAll", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Facade extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FacadeInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createOption(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createOption(address,uint256,uint256,uint256,address[],uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exchange(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "exchange()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    exercise(
      optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exercise(uint256)"(
      optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBaseOptionCost(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getBaseOptionCost(address,uint256,uint256,uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getOptionPrice(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      baseTotal: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getOptionPrice(address,uint256,uint256,uint256,address[])"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      baseTotal: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    optionsManager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "optionsManager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    poolApprove(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "poolApprove(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    provideEthToPool(
      pool: string,
      minShare: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "provideEthToPool(address,uint256)"(
      pool: string,
      minShare: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockAll(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockAll(address,uint256[])"(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  createOption(
    pool: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    swappath: string[],
    acceptablePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createOption(address,uint256,uint256,uint256,address[],uint256)"(
    pool: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    swappath: string[],
    acceptablePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exchange(overrides?: CallOverrides): Promise<string>;

  "exchange()"(overrides?: CallOverrides): Promise<string>;

  exercise(
    optionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exercise(uint256)"(
    optionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBaseOptionCost(
    pool: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getBaseOptionCost(address,uint256,uint256,uint256)"(
    pool: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getOptionPrice(
    pool: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    swappath: string[],
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    baseTotal: BigNumber;
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "getOptionPrice(address,uint256,uint256,uint256,address[])"(
    pool: string,
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    swappath: string[],
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    baseTotal: BigNumber;
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  optionsManager(overrides?: CallOverrides): Promise<string>;

  "optionsManager()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolApprove(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "poolApprove(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  provideEthToPool(
    pool: string,
    minShare: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "provideEthToPool(address,uint256)"(
    pool: string,
    minShare: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockAll(
    pool: string,
    optionIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockAll(address,uint256[])"(
    pool: string,
    optionIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    createOption(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOption(address,uint256,uint256,uint256,address[],uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchange(overrides?: CallOverrides): Promise<string>;

    "exchange()"(overrides?: CallOverrides): Promise<string>;

    exercise(optionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exercise(uint256)"(
      optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBaseOptionCost(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getBaseOptionCost(address,uint256,uint256,uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getOptionPrice(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      baseTotal: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getOptionPrice(address,uint256,uint256,uint256,address[])"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      baseTotal: BigNumber;
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    optionsManager(overrides?: CallOverrides): Promise<string>;

    "optionsManager()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolApprove(pool: string, overrides?: CallOverrides): Promise<void>;

    "poolApprove(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    provideEthToPool(
      pool: string,
      minShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "provideEthToPool(address,uint256)"(
      pool: string,
      minShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockAll(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockAll(address,uint256[])"(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    createOption(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createOption(address,uint256,uint256,uint256,address[],uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exchange(overrides?: CallOverrides): Promise<BigNumber>;

    "exchange()"(overrides?: CallOverrides): Promise<BigNumber>;

    exercise(optionId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exercise(uint256)"(
      optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBaseOptionCost(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBaseOptionCost(address,uint256,uint256,uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionPrice(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOptionPrice(address,uint256,uint256,uint256,address[])"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionsManager(overrides?: CallOverrides): Promise<BigNumber>;

    "optionsManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolApprove(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "poolApprove(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    provideEthToPool(
      pool: string,
      minShare: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "provideEthToPool(address,uint256)"(
      pool: string,
      minShare: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockAll(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockAll(address,uint256[])"(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOption(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createOption(address,uint256,uint256,uint256,address[],uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      acceptablePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exercise(
      optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exercise(uint256)"(
      optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBaseOptionCost(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseOptionCost(address,uint256,uint256,uint256)"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionPrice(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOptionPrice(address,uint256,uint256,uint256,address[])"(
      pool: string,
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      swappath: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionsManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolApprove(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "poolApprove(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    provideEthToPool(
      pool: string,
      minShare: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "provideEthToPool(address,uint256)"(
      pool: string,
      minShare: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockAll(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockAll(address,uint256[])"(
      pool: string,
      optionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
