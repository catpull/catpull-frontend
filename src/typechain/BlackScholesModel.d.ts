/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BlackScholesModelInterface extends ethers.utils.Interface {
  functions: {
    "calculatePremiums(int256,int256,int256,int256,int256,int256,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculatePremiums",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePremiums",
    data: BytesLike
  ): Result;

  events: {};
}

export class BlackScholesModel extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BlackScholesModelInterface;

  functions: {
    calculatePremiums(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPremium: BigNumber;
      putPremium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculatePremiums(int256,int256,int256,int256,int256,int256,int256)"(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPremium: BigNumber;
      putPremium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  calculatePremiums(
    amount: BigNumberish,
    currentPrice: BigNumberish,
    strike: BigNumberish,
    period: BigNumberish,
    swingRate: BigNumberish,
    impliedVolatility: BigNumberish,
    riskFreeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    callPremium: BigNumber;
    putPremium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "calculatePremiums(int256,int256,int256,int256,int256,int256,int256)"(
    amount: BigNumberish,
    currentPrice: BigNumberish,
    strike: BigNumberish,
    period: BigNumberish,
    swingRate: BigNumberish,
    impliedVolatility: BigNumberish,
    riskFreeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    callPremium: BigNumber;
    putPremium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    calculatePremiums(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPremium: BigNumber;
      putPremium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculatePremiums(int256,int256,int256,int256,int256,int256,int256)"(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPremium: BigNumber;
      putPremium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    calculatePremiums(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePremiums(int256,int256,int256,int256,int256,int256,int256)"(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePremiums(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePremiums(int256,int256,int256,int256,int256,int256,int256)"(
      amount: BigNumberish,
      currentPrice: BigNumberish,
      strike: BigNumberish,
      period: BigNumberish,
      swingRate: BigNumberish,
      impliedVolatility: BigNumberish,
      riskFreeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
