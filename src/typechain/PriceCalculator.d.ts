/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PriceCalculatorInterface extends ethers.utils.Interface {
  functions: {
    "_calculatePrice(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateTotalPremium(uint256,uint256,uint256,bool,uint256)": FunctionFragment;
    "daoshare()": FunctionFragment;
    "impliedVolRate()": FunctionFragment;
    "model()": FunctionFragment;
    "owner()": FunctionFragment;
    "params()": FunctionFragment;
    "pool()": FunctionFragment;
    "priceProvider()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "riskFreeRate()": FunctionFragment;
    "setDaoShare(uint256)": FunctionFragment;
    "setImpliedVolRate(int256)": FunctionFragment;
    "setRiskFreeRate(int256)": FunctionFragment;
    "setSwingRate(int256)": FunctionFragment;
    "swingRate()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_calculatePrice",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalPremium",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoshare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "impliedVolRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "model", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskFreeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setImpliedVolRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskFreeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swingRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_calculatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoshare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "impliedVolRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "model", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskFreeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImpliedVolRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskFreeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swingRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DaoShareChanged(uint256)": EventFragment;
    "IVChanged(int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RiskFreeRateChanged(int256)": EventFragment;
    "SwingRateChanged(int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DaoShareChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IVChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskFreeRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwingRateChanged"): EventFragment;
}

export class PriceCalculator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PriceCalculatorInterface;

  functions: {
    _calculatePrice(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPrice: BigNumber;
      putPrice: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "_calculatePrice(uint256,uint256,uint256,uint256)"(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPrice: BigNumber;
      putPrice: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTotalPremium(uint256,uint256,uint256,bool,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    daoshare(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "daoshare()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    impliedVolRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "impliedVolRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    model(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "model()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    params(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "params()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    pool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "pool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    priceProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "priceProvider()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    riskFreeRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setDaoShare(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDaoShare(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setImpliedVolRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setImpliedVolRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRiskFreeRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRiskFreeRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwingRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwingRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swingRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "swingRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _calculatePrice(
    currentPrice: BigNumberish,
    amount: BigNumberish,
    period: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    callPrice: BigNumber;
    putPrice: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "_calculatePrice(uint256,uint256,uint256,uint256)"(
    currentPrice: BigNumberish,
    amount: BigNumberish,
    period: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    callPrice: BigNumber;
    putPrice: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  calculateTotalPremium(
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    isCall: boolean,
    outDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "calculateTotalPremium(uint256,uint256,uint256,bool,uint256)"(
    period: BigNumberish,
    amount: BigNumberish,
    strike: BigNumberish,
    isCall: boolean,
    outDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    settlementFee: BigNumber;
    premium: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  daoshare(overrides?: CallOverrides): Promise<BigNumber>;

  "daoshare()"(overrides?: CallOverrides): Promise<BigNumber>;

  impliedVolRate(overrides?: CallOverrides): Promise<BigNumber>;

  "impliedVolRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  model(overrides?: CallOverrides): Promise<string>;

  "model()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  params(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "params()"(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  priceProvider(overrides?: CallOverrides): Promise<string>;

  "priceProvider()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "riskFreeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  setDaoShare(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDaoShare(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setImpliedVolRate(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setImpliedVolRate(int256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRiskFreeRate(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRiskFreeRate(int256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwingRate(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSwingRate(int256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swingRate(overrides?: CallOverrides): Promise<BigNumber>;

  "swingRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _calculatePrice(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPrice: BigNumber;
      putPrice: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "_calculatePrice(uint256,uint256,uint256,uint256)"(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      callPrice: BigNumber;
      putPrice: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTotalPremium(uint256,uint256,uint256,bool,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      settlementFee: BigNumber;
      premium: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    daoshare(overrides?: CallOverrides): Promise<BigNumber>;

    "daoshare()"(overrides?: CallOverrides): Promise<BigNumber>;

    impliedVolRate(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedVolRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    model(overrides?: CallOverrides): Promise<string>;

    "model()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    params(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "params()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    priceProvider(overrides?: CallOverrides): Promise<string>;

    "priceProvider()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDaoShare(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setDaoShare(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setImpliedVolRate(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setImpliedVolRate(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskFreeRate(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRiskFreeRate(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwingRate(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setSwingRate(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swingRate(overrides?: CallOverrides): Promise<BigNumber>;

    "swingRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DaoShareChanged(undefined: null): EventFilter;

    IVChanged(undefined: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RiskFreeRateChanged(undefined: null): EventFilter;

    SwingRateChanged(undefined: null): EventFilter;
  };

  estimateGas: {
    _calculatePrice(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_calculatePrice(uint256,uint256,uint256,uint256)"(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTotalPremium(uint256,uint256,uint256,bool,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoshare(overrides?: CallOverrides): Promise<BigNumber>;

    "daoshare()"(overrides?: CallOverrides): Promise<BigNumber>;

    impliedVolRate(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedVolRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    model(overrides?: CallOverrides): Promise<BigNumber>;

    "model()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    params(overrides?: CallOverrides): Promise<BigNumber>;

    "params()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "priceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDaoShare(value: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setDaoShare(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setImpliedVolRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setImpliedVolRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRiskFreeRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRiskFreeRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwingRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSwingRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swingRate(overrides?: CallOverrides): Promise<BigNumber>;

    "swingRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _calculatePrice(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_calculatePrice(uint256,uint256,uint256,uint256)"(
      currentPrice: BigNumberish,
      amount: BigNumberish,
      period: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalPremium(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTotalPremium(uint256,uint256,uint256,bool,uint256)"(
      period: BigNumberish,
      amount: BigNumberish,
      strike: BigNumberish,
      isCall: boolean,
      outDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoshare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "daoshare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    impliedVolRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "impliedVolRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    model(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "model()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "params()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    riskFreeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDaoShare(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDaoShare(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setImpliedVolRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setImpliedVolRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRiskFreeRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRiskFreeRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwingRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwingRate(int256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swingRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
