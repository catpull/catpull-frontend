/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UniswapRouterMockInterface extends ethers.utils.Interface {
  functions: {
    "ETHPriceProvider()": FunctionFragment;
    "USDC()": FunctionFragment;
    "WBTC()": FunctionFragment;
    "WBTCPriceProvider()": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETHPriceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WBTC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WBTCPriceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETHPriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WBTC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WBTCPriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniswapRouterMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UniswapRouterMockInterface;

  functions: {
    ETHPriceProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ETHPriceProvider()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    USDC(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "USDC()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WBTC(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WBTC()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WBTCPriceProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WBTCPriceProvider()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  ETHPriceProvider(overrides?: CallOverrides): Promise<string>;

  "ETHPriceProvider()"(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  "USDC()"(overrides?: CallOverrides): Promise<string>;

  WBTC(overrides?: CallOverrides): Promise<string>;

  "WBTC()"(overrides?: CallOverrides): Promise<string>;

  WBTCPriceProvider(overrides?: CallOverrides): Promise<string>;

  "WBTCPriceProvider()"(overrides?: CallOverrides): Promise<string>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsIn(uint256,address[])"(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  swapETHForExactTokens(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    arg3: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapETHForExactTokens(uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    arg3: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ETHPriceProvider(overrides?: CallOverrides): Promise<string>;

    "ETHPriceProvider()"(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    WBTC(overrides?: CallOverrides): Promise<string>;

    "WBTC()"(overrides?: CallOverrides): Promise<string>;

    WBTCPriceProvider(overrides?: CallOverrides): Promise<string>;

    "WBTCPriceProvider()"(overrides?: CallOverrides): Promise<string>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    ETHPriceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "ETHPriceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC()"(overrides?: CallOverrides): Promise<BigNumber>;

    WBTC(overrides?: CallOverrides): Promise<BigNumber>;

    "WBTC()"(overrides?: CallOverrides): Promise<BigNumber>;

    WBTCPriceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "WBTCPriceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHPriceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETHPriceProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WBTC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBTCPriceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WBTCPriceProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      arg3: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
